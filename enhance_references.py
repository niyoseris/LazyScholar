#!/usr/bin/env python3
"""
Enhance References - A tool to improve citations in LazyScholar's final paper

This script:
1. Reads the final paper generated by LazyScholar
2. Enhances the references section with more detailed academic citations
3. Creates a new version of the final paper with improved references
"""

import os
import re
import json
import logging
from pathlib import Path
import google.generativeai as genai
from dotenv import load_dotenv

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("enhance_references.log")
    ]
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
if not GOOGLE_API_KEY:
    logger.error("GOOGLE_API_KEY not found in environment variables. Please set it in .env file.")
    exit(1)

# Configure Google Generative AI
genai.configure(api_key=GOOGLE_API_KEY)

def initialize_model():
    """Initialize the Gemini model for content analysis."""
    try:
        # Set up generation config
        generation_config = {
            "temperature": 0.2,  # Lower temperature for more consistent output
            "top_p": 0.95,
            "top_k": 40,
            "max_output_tokens": 8192,
        }
        
        # Initialize the model
        model = genai.GenerativeModel(
            model_name="gemini-2.0-flash-001",
            generation_config=generation_config,
        )
        logger.info("Successfully initialized Gemini model")
        return model
    except Exception as e:
        logger.error(f"Failed to initialize Gemini model: {str(e)}")
        return None

def extract_pdf_filenames():
    """Extract PDF filenames from the pdfs directory."""
    pdf_dir = Path("research_output/pdfs")
    if not pdf_dir.exists():
        logger.warning(f"PDF directory not found: {pdf_dir}")
        return []
    
    pdf_files = list(pdf_dir.glob("*.pdf"))
    logger.info(f"Found {len(pdf_files)} PDF files")
    return pdf_files

def extract_references_from_final_paper(final_paper_path):
    """Extract the current references from the final paper."""
    try:
        with open(final_paper_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Extract references section
        references_match = re.search(r'## References\s*\n(.*?)(?:\n\n|\Z)', content, re.DOTALL)
        if not references_match:
            logger.warning("References section not found in the final paper")
            return []
        
        references_text = references_match.group(1)
        
        # Extract individual references
        references = []
        for line in references_text.split('\n'):
            if line.strip() and line.strip()[0].isdigit():
                references.append(line.strip())
        
        logger.info(f"Extracted {len(references)} references from the final paper")
        return references
    except Exception as e:
        logger.error(f"Error extracting references: {str(e)}")
        return []

def enhance_references(model, references, pdf_files):
    """Use simple numbered references instead of enhanced academic citations."""
    enhanced_references = []
    
    for i, ref in enumerate(references, 1):
        # Extract topic and subtopic if present
        match = re.search(r'\d+\.\s+\*\*(.*?)\*\*:\s+(.*)', ref)
        if match:
            topic_subtopic = match.group(1)
            sources = match.group(2)
            
            # Format with just the PDF filename
            if sources.lower().endswith('.pdf'):
                enhanced_ref = f"{i}. **{topic_subtopic}**: {sources}"
            else:
                enhanced_ref = f"{i}. **{topic_subtopic}**: {sources}"
            
            enhanced_references.append(enhanced_ref)
        else:
            # Keep as is if format doesn't match
            enhanced_references.append(ref)
    
    return enhanced_references

def update_final_paper(final_paper_path, enhanced_references):
    """Update the final paper with enhanced references."""
    try:
        # Read the final paper
        with open(final_paper_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Create new references section
        new_references_section = "## References\n\n"
        for ref in enhanced_references:
            new_references_section += f"{ref}\n\n"
        
        # Replace old references section
        if "## References" in content:
            new_content = re.sub(r'## References\s*\n.*', new_references_section, content, flags=re.DOTALL)
        else:
            new_content = content + "\n\n" + new_references_section
        
        # Write to a new file
        enhanced_paper_path = final_paper_path.replace(".md", "_with_enhanced_references.md")
        with open(enhanced_paper_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        logger.info(f"Created enhanced paper with improved references: {enhanced_paper_path}")
        return enhanced_paper_path
    except Exception as e:
        logger.error(f"Error updating final paper: {str(e)}")
        return None

def main():
    """Main function to enhance references in the final paper."""
    logger.info("Starting reference enhancement process...")
    
    # Initialize model
    model = initialize_model()
    if not model:
        logger.error("Failed to initialize model. Exiting.")
        return
    
    # Define paths
    final_paper_path = "research_output/final_paper.md"
    if not os.path.exists(final_paper_path):
        logger.error(f"Final paper not found at {final_paper_path}")
        return
    
    # Extract PDF filenames
    pdf_files = extract_pdf_filenames()
    
    # Extract current references
    references = extract_references_from_final_paper(final_paper_path)
    if not references:
        logger.warning("No references found to enhance")
        return
    
    # Enhance references
    enhanced_references = enhance_references(model, references, pdf_files)
    
    # Update final paper
    enhanced_paper_path = update_final_paper(final_paper_path, enhanced_references)
    if enhanced_paper_path:
        logger.info(f"Successfully enhanced references in {enhanced_paper_path}")
        print(f"\nEnhanced paper with improved references created at: {enhanced_paper_path}")
    else:
        logger.error("Failed to create enhanced paper")

if __name__ == "__main__":
    main() 